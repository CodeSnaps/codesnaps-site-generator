create table sites (
    id uuid primary key default gen_random_uuid(),
    organization_id bigint references public.organizations on delete cascade not null,
    page_description text not null,
    color_scheme text not null,
    structure json not null,
    site_schema text not null,
    project_name text not null,
    created_at timestamptz default now() not null
);

alter table sites enable row level security;

create policy "Can read sites if user is a member of the organization"
   on sites
   for select
   to authenticated
   using (
     current_user_is_member_of_organization(organization_id)
);

create policy "Can write sites if user is a member of the organization"
   on sites
   for insert
   to authenticated
   with check (
     current_user_is_member_of_organization(organization_id)
);

create policy "Can update sites if user is a member of the organization"
   on sites
   for update
   to authenticated
   using (
     current_user_is_member_of_organization(organization_id)
   )
   with check (
      current_user_is_member_of_organization(organization_id)
);

create policy "Can delete sites if user is a member of the organization"
   on sites
   for delete
   to authenticated
   using (
     current_user_is_member_of_organization(organization_id)
);

create table plans (
  name text not null,
  price_id text not null,
  tokens bigint not null,
  primary key (price_id)
);
 
create table organization_usage (
  id bigint generated by default as identity primary key,
  organization_id bigint not null references public.organizations on delete cascade,
  tokens_quota bigint default 50000 not null
);

alter table plans enable row level security;
alter table organization_usage enable row level security;
 
create policy "Users can read token counts in their Organization"
  on organization_usage
  for select
  to authenticated
  using (
    current_user_is_member_of_organization(organization_id)
  );
 
create policy "Users can read plans"
  on plans
  for select
  to authenticated
  using (
    true
  );

  -- insert usage row for organizations on creation
create function public.handle_new_organization()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.organization_usage (organization_id)
  values (new.id);
  return new;
end;
$$;
 
-- trigger the function every time a user is created
create trigger on_organization_created
  after insert on public.organizations
  for each row execute procedure public.handle_new_organization();


create or replace function get_remaining_tokens(org_id bigint)
    returns bigint as $$
declare
    tokens_left bigint;
begin
    select tokens_quota from organization_usage where organization_id = org_id into tokens_left;
 
    return tokens_left;
end; $$
    language plpgsql;
 
create or replace function subtract_tokens(org_id bigint, tokens bigint)
    returns bigint as $$
declare
    remaining_tokens bigint;
begin
    update organization_usage set tokens_quota = tokens_quota - tokens where organization_id = org_id returning tokens_quota into remaining_tokens;
 
    return remaining_tokens;
end; $$
    language plpgsql;